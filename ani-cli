#!/bin/sh

# version number
VERSION="1.2.0"

logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"


#######################
# Auxiliary functions #
#######################

help_text () {
	while IFS= read -r line; do
		printf "%s\n" "$line"
	done <<-EOF

	Usage:
	  $0 [-v | -i] [-q <quality>] [-d | -p <download_dir>] [<query>]
	  $0 [-v | -i] [-q <quality>] -c
	  $0 -h | -D | -U | -V

	Options:
	  -c continue watching anime from history
	  -h show helptext
	  -d download episode
	  -p download episode to specified directory
	  -q set video quality (best|worst|360|480|720|1080)
	  -i use iina as the media player
	  -v use VLC as the media player
	  -D delete history
	  -U fetch update from github
	  -V print version number and exit

	Episode selection:
	  Add 'h' on beginning for episodes like '6.5' -> 'h6'
	  Multiple episodes can be chosen given a range
	    Choose episode [1-13]: 1 6
	    This would choose episodes 1 2 3 4 5 6
	EOF
}

version_text () {
    inf "Version: $VERSION"  >&2
}

die () {
	err "$*"
	exit 1
}

update_script () {
	# get the newest version of this script from github and replace it
	update="$(curl -s "https://raw.githubusercontent.com/pystardust/ani-cli/master/ani-cli" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		inf "Script is up to date :)"
	else
		if printf '%s\n' "$update" | patch "$0" - ; then
			inf "Script has been updated"
		else
			die "Can't update for some reason!"
            	fi
	fi
}

dep_ch () {
	# checks if programs are present 
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			err "Program \"$dep\" not found. Please install it."
			#aria2c is in the package aria2
			if [ "$dep" = "aria2c" ]; then
				err "To install aria2c, Type <your_package_manager> aria2"
			fi
			die
		fi
	done
}


#############
# Searching #
#############

search_anime () {
	# get anime name along with its id for search term
	search=$(printf '%s' "$1" | tr ' ' '-' )

	curl -s "$base_url//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "$base_url/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

search_for_unwatched () {	
	# compares history with gogoanime, only shows unfinished anime
	search_results=$*

	unwatched_anime=""
	while read -r anime_id; do
		current_ep_number="$(search_eps "$anime_id")"
		history_ep_number="$(sed -n -E "s/${anime_id}\t//p" "$logfile")"
		if [ "$current_ep_number" -ge "$history_ep_number" ]
		then
			# breaks down with \n because of the display functions
			unwatched_anime="$unwatched_anime$anime_id
"
		fi
	done <<-EOF
	$search_results
	EOF
	if [ -z "$unwatched_anime" ]; then
		die "No unwatched episodes"
	fi
	printf "%s" "$unwatched_anime"
}


##################
# URL processing #
##################

get_dpage_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	# dub prefix takes the value "-dub" when dub is needed else is empty
	anime_page=$(curl -s "$base_url/$anime_id-$ep_no")

	if printf '%s' "$anime_page" | grep -q "404" ; then
		anime_page=$(curl -s "$base_url/$anime_id-episode-$ep_no")
	fi

	printf '%s' "$anime_page" |
	    sed -n -E 's/^[[:space:]]*<a href="#" rel="100" data-video="([^"]*)".*/\1/p' |
	    sed 's/^/https:/g'
}

decrypt_link() {
    ajax_url='https://gogoplay.io/encrypt-ajax.php'

    #get the id from the url
    video_id=$(echo "$1" | cut -d\? -f2 | cut -d\& -f1 | sed 's/id=//g')

    #construct ajax parameters
    secret_key='3235373436353338353932393338333936373634363632383739383333323838'
    iv='34323036393133333738303038313335'
    ajax=$(echo "$video_id" | openssl enc -aes256  -K "$secret_key" -iv "$iv" -a)

    #send the request to the ajax url
    curl -s -H 'x-requested-with:XMLHttpRequest' "$ajax_url" -d "id=$ajax" -d "time=69420691337800813569" | jq -r '.source[].file'
}

get_video_quality() {
	# chooses the link for the set quality
	dpage_url="$1"
	video_links=$(decrypt_link "$dpage_url")
	case $quality in
		best)
			video_link=$(printf '%s' "$video_links" | head -n 4 | tail -n 1)
			;;

		worst)
			video_link=$(printf '%s' "$video_links" | head -n 1)
			;;

		*)
			video_link=$(printf '%s' "$video_links" | grep -i "${quality}p" | head -n 1)
			if [ -z "$video_link" ]; then
				err "Current video quality is not available (defaulting to best quality)"
				quality=best
				video_link=$(printf '%s' "$video_links" | head -n 4 | tail -n 1)
			fi
			;;
	esac
	printf '%s' "$video_link"
}


###############
# Text output #
###############

err () {
	# display an error message to stderr (in red)
	printf "$c_red%s$c_reset\n" "$*" >&2
}

inf () {
	# display an informational message (first argument in green, second in magenta)
	printf "$c_green%s $c_magenta%s$c_reset\n" "$1" "$2"
}

prompt () {
        # prompts the user with message in $1-2 ($1 in blue, $2 in magenta) and saves the input to the variables in $REPLY and $REPLY2
        printf "$c_blue%s$c_magenta%s$c_blue: $c_reset" "$1" "$2"
        read -r REPLY REPLY2
}

menu_line_even () {
	# displays an even (cyan) line of a menu line with $2 as an indicator in [] and $1 as the option
	printf "$c_blue"; printf "[$c_cyan%s$c_blue] $c_cyan%s$c_reset%s\n" "$2" "$1"
}

menu_line_odd() {
	# displays an odd (yellow) line of a menu line with $2 as an indicator in [] and $1 as the option
	printf "$c_blue"; printf "[$c_yellow%s$c_blue] $c_yellow%s$c_reset%s\n" "$2" "$1"
}

menu_line_strong() {
	# displays a warning (red) line of a menu line with $2 as an indicator in [] and $1 as the option
	printf "$c_blue"; printf "[$c_red%s$c_blue] $c_red%s$c_reset%s\n" "$2" "$1"
}


#################
# Input parsing #
#################

anime_selection () {
	# user input for selecting anime
	count=1
	while read -r anime_id; do
		if [ $((count % 2)) -eq 0 ]; then
			menu_line_even "$anime_id" "$count"
		else
			menu_line_odd "$anime_id" "$count"
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	prompt "Enter number" 
	choice="$REPLY $REPLY2"

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read -r anime_id; do
		if [ "$count" -eq "$choice" ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	if [ -z "$selection_id" ]; then
		die "Invalid number entered"
	fi
	
	read -r last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

episode_selection () {
	# user input for selecting episodes of a series
	ep_choice_start="1"
	if [ "$last_ep_number" -gt 1 ]
	then
		if [ "$is_download" -eq 1 ]; then
			inf "Range of episodes can be specified: start_number end_number"
		fi
		prompt "Choose episode" "[1-$last_ep_number]" 
		ep_choice_start=$REPLY
		ep_choice_end=$REPLY2
		if [ "$(echo "$ep_choice_start" | cut -c1-1)" = "h" ]
		then
			half_ep=1
			ep_choice_start=$(echo "$ep_choice_start" | cut -c2-)
		fi
	fi
}

check_input() {
	# checks if input is number, creates $episodes from $ep_choice_start and $ep_choice_end
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start
	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq "$ep_choice_start" "$ep_choice_end")
	fi
}


##################
# Video Playback #
##################

append_history () {
	grep -q -w "${selection_id}" "$logfile" ||
		printf "%s\t%d\n" "$selection_id" $((episode+1)) >> "$logfile"
}

open_selection() {
	# opens selected episodes one-by-one
	for ep in $episodes
	do
		open_episode "$selection_id" "$ep"
	done
	episode=${ep_choice_end:-$ep_choice_start}
}

open_episode () {
	anime_id=$1
	episode=$2
	# Cool way of clearing screen
	tput reset
	# checking if episode is in range
	while [ "$episode" -lt 1 ] || [ "$episode" -gt "$last_ep_number" ] || [ -z "$episode"  ]
	do

		if [ "$last_ep_number" -eq 0 ]; then
			die "Episodes not released yet!"
		else
			err "Episode out of range"
		fi
		prompt "Choose episode" "[1-$last_ep_number]" 
		episode="$REPLY $REPLY2"
	done
	#processing half episodes
	if [ "$half_ep" -eq 1 ]
	then
		temp_ep=$episode
		episode=$episode"-5"
	fi

	inf "Getting data for episode $episode"
	# decrypting url
	dpage_link=$(get_dpage_link "$anime_id" "$episode")
	video_url=$(get_video_quality "$dpage_link")
	if [ "$half_ep" -eq 1 ]; then
		episode=$temp_ep
		half_ep=0
	fi
	# Download or play episodes
	if [ "$is_download" -eq 0 ]; then
		# write anime and episode number and save to temporary history
		sed -E "
			s/^${selection_id}\t[0-9]+/${selection_id}\t$((episode+1))/
		" "$logfile" > "${logfile}.new"

		kill "$PID" >/dev/null 2>&1

		if [ -z "$video_url" ]; then
			die "Video URL not found"
		fi

		case $player_fn in
			vlc)
				nohup "$player_fn" --http-referrer="$dpage_link" "$video_url" > /dev/null 2>&1 &
				;;
			*)
				nohup "$player_fn" --referrer="$dpage_link" "$video_url" > /dev/null 2>&1 &
				;;
		esac
		PID=$!

		mv "${logfile}.new" "$logfile"
	else
		mkdir -p "$download_dir"
		inf "Downloading episode $episode ...\n"
		# add 0 padding to the episode name
		episode=$(printf "%03d" "$episode")
		{
		    #uncomment this below line if you are getting low download speeds, and comment next one after below line
			#aria2c -x 16 -s 16 --referer="$dpage_link" "$video_url" --dir="$download_dir" -o "${anime_id}-${episode}.mp4" --download-result=hide &&
			if aria2c --referer="$dpage_link" "$video_url" --dir="$download_dir" -o "${anime_id}-${episode}.mp4" --download-result=hide ;then
				inf "Downloaded episode: $episode" 
			else
				err "Download failed episode: $episode , please retry or check your internet connection"
			fi
		}
	fi
}

############
# Start Up #
############

# to clear the colors when exited using SIGINT
trap 'printf "$c_reset"; exit 1' INT HUP

# create history file if none found
[ -f "$logfile" ] || : > "$logfile"

# default options
player_fn="mpv" #video player needs to be able to play urls
is_download=0
half_ep=0
quality=best
scrape=query
download_dir="."
choice=""

while getopts 'viq:dp:chDUV' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
		D)
			: > "$logfile"
			exit 0
			;;
		p)
			is_download=1
			download_dir=$OPTARG
			;;
		i)
			player_fn="iina"
			;;
		q)
			quality=$OPTARG
			;;
		c)
			scrape=history
			;;
		v)
			player_fn="vlc"
			;;
		U)
			update_script
			exit 0
			;;
		V)
			version_text
			exit 0
			;;
		*)
			help_text
			exit 1
			;;
	esac
done

# check for main dependencies
dep_ch "curl" "sed" "grep" "git" "jq" "openssl"

# check for optional dependencies
if [ "$is_download" -eq 0 ]; then
	dep_ch "$player_fn"
else
	dep_ch "aria2c"	
fi

shift $((OPTIND - 1))
# gogoanime likes to change domains but keep the olds as redirects
base_url=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://gogoanime.cm)
case $scrape in
	query)
		if [ -z "$*" ]; then
			prompt "Search Anime" 
			query="$REPLY $REPLY2"
		else
			query=$*
		fi
		search_results=$(search_anime "$query")
		[ -z "$search_results" ] && die "No search results found"
		anime_selection "$search_results"
		episode_selection
		;;
	history)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		search_results=$(search_for_unwatched "$search_results")
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
	*)
		die "Unexpected Scrape type"
esac


########
# Loop #
########

while :; do
	check_input
	append_history
	open_selection
	inf "Currently playing $selection_id episode" "$episode/$last_ep_number"
	# display menu
	if [ "$episode" -ne "$last_ep_number" ]; then
		menu_line_odd "next episode" "n"
	fi
	if [ "$episode" -ne "1" ]; then
		menu_line_even "previous episode" "p"
	fi
	if [ "$last_ep_number" -ne "1" ]; then
		menu_line_odd "select episode" "s"
	fi
	menu_line_even "replay current episode" "r"
	menu_line_odd "search for another anime" "a"
	menu_line_even "search history" "h"
	menu_line_strong "exit" "q"
	prompt "Enter choice"
	# process user choice
	choice="$REPLY $REPLY2"
	case $choice in
		n)
			ep_choice_start=$((episode + 1))
			ep_choice_end=""
			;;
		p)
			ep_choice_start=$((episode - 1))
			ep_choice_end=""
			;;

		s)	episode_selection
			;;

		r)
			ep_choice_start=$((episode))
			ep_choice_end=""
			;;
		a)
			tput reset
			prompt "Search Anime" 
			query="$REPLY $REPLY2"
			search_results=$(search_anime "$query")
			[ -z "$search_results" ] && die "No search results found"
			anime_selection "$search_results"
			episode_selection
			;;
		h)
			tput reset
			search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
			[ -z "$search_results" ] && die "History is empty"
			search_results=$(search_for_unwatched "$search_results")
			anime_selection "$search_results"
			ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
			;;

		q)
			break;;

		*)
			tput reset
			err "invalid choice"
			continue
			;;
	esac
done
