#!/bin/sh

# dependencies: grep sed curl video_player
# video_player ( needs to be able to play urls )
player_fn="mpv"

prog="ani-cli"
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"


help_text () {
	while IFS= read line; do
		printf "%s\n" "$line"
	done <<-EOF
	USAGE: $prog <query>
	 -h	 show this help text
	 -d	 download episode
	 -H	 continue where you left off
	 -D	 use dmenu as interface instead of the terminal
	EOF
}


die () {
	if [ $is_dmenu -eq 1 ]; then
		printf "%s" "$*" >&2 | dmenu
	else
		printf "$c_red%s$c_reset\n" "$*" >&2
	fi

	exit 1
}

err () {
	if [ $is_dmenu -eq 1 ]; then
		printf "%s" "$*" >&2 | dmenu
	else
		printf "$c_red%s$c_reset\n" "$*" >&2
	fi
}

search_anime () {
	# get anime name along with its id
	search=$(printf '%s' "$1" | tr ' ' '-' )
	titlepattern='<a href="/category/'

	curl -s "https://gogoanime.vc//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "https://gogoanime.vc/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_embedded_video_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	curl -s "https://gogoanime.vc/$anime_id-episode-$ep_no" |
	sed -n -E '
		/^[[:space:]]*<a href="#" rel="100"/{
		s/.*data-video="([^"]*)".*/https:\1/p
		q
		}'
}

get_links () {
	embedded_video_url="$1"
	curl -s "$embedded_video_url" |
	sed -n -E '
		/^[[:space:]]*sources:/{
		s/.*(https[^'\'']*).*/\1/p
		q
		}
		'
}

dep_ch () {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			die "Program \"$dep\" not found. Please install it."
		fi
	done
}

has_dmenu () {
	if ! command -v "dmenu" >/dev/null ; then
		die "Program \"dmenu\" not found. Please install it."
	fi
}

# get query
get_search_query () {
	if [ -z "$*" ]; then
		if [ $is_dmenu -eq 1 ]; then
			query=$( printf "" | dmenu -p "Search Anime: ")
		else
			printf "Search Anime: "
			read -r query
		fi
	else
		query=$*
	fi
}

# create history file
[ -f "$logfile" ] || : > "$logfile"

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*

	count=1
	if [ $is_dmenu -eq 1 ]; then
		anime_list=""
		while read anime_id; do
			anime_list="$anime_list$count - $anime_id\n"
			count=$((count+1))
		done <<-EOF
		$search_results
		EOF

		choice=$( printf "$anime_list" | dmenu -p "Enter number: " -l 30 | awk '{print $1}' )
	else
		menu_format_string='[%d] %s\n'
		menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
		menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

		while read anime_id; do
			# alternating colors for menu
			[ $((count % 2)) -eq 0 ] &&\
				menu_format_string=$menu_format_string_c1 ||\
				menu_format_string=$menu_format_string_c2

			printf "$menu_format_string" "$count" "$anime_id"
			count=$((count+1))
		done <<-EOF
		$search_results
		EOF

		# User input
		printf "$c_blue%s$c_green" "Enter number: "
		read choice
		printf "$c_reset"
	fi

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

##################
## Ep selection ##
##################

episode_selection () {
	if [ $is_download -eq 1 ]; then
		msg="Range of episodes can be specified: start_number end_number"
		[ $is_dmenu -eq 1 ] && $( printf "" | dmenu -p "$msg" ) ||\
			printf "$msg\n"
	fi

	if [ $is_dmenu -eq 1 ]; then
		ans=$( printf "" | dmenu -p "Choose episode [1-$last_ep_number]:" )
		ep_choice_start=$(echo $ans | awk '{print $1}')
		ep_choice_end=$(echo $ans | awk '{print $2}')
	else
		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
		read ep_choice_start ep_choice_end
		printf "$c_reset"
	fi


}

#Function to handle the user choice
loop_choice() {
	while :; do
		if [ $is_dmenu -eq 0 ]; then
			printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" $episode $last_ep_number
			printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
			printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
			printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "s" "select episode"
			printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "r" "replay current episode"
			printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
			printf "${c_blue}Enter choice:${c_green} "
			read choice
			printf "$c_reset"
		else
			choice=$(
				printf "%s\n%s\n%s\n%s\n%s" \
					"n next episode" \
					"p previous episode" \
					"s select episode" \
					"r replay current episode" \
					"q quit" |\
					dmenu -p "Currently playing $selection_id episode $episode/$last_ep_number" -l 5 |\
					awk '{print $1}'
			)
		fi

		case $choice in
			n)
				episode=$((episode + 1))
				;;
			p)
				episode=$((episode - 1))
				;;
	
			s)	if [ $is_dmenu -eq 0 ]; then
					printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
					read episode
					printf "$c_reset"
				else
					episode=$( printf "" | dmenu -p "Choose episode [1-$last_ep_number]: " )
				fi
				[ "$episode" -eq "$episode" ] 2>/dev/null || die "Invalid number entered"
				;;
	
			r)
				;;
	
			q)
				break;;
	
			*)
				die "invalid choice"
				;;
		esac
	
		open_episode "$selection_id" "$episode"
	done
}

open_episode () {
	anime_id=$1
	episode=$2

	# Cool effect way of clearing screen
	printf '\x1B[2J\x1B[1;1H'
	if [ $episode -lt 1 ] || [ $episode -gt $last_ep_number ]; then
		err "Episode out of range"
		if [ $is_dmenu -eq 1 ]; then
			episode=$( printf "" | dmenu -p "Choose episode [1-$last_ep_number]: " )
		else
			printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
			read episode
		fi
		printf "$c_reset"
	fi

	[ $is_dmenu -eq 1 ] || printf "Getting data for episode %d\n" $episode

	embedded_video_url=$(get_embedded_video_link "$anime_id" "$episode")
	video_url=$(get_links "$embedded_video_url")

	case $video_url in
		*streamtape*)
			# If direct download not available then scrape streamtape.com
			BROWSER=${BROWSER:-firefox}
			[ $is_dmenu -eq 1 ] && notify-send "scraping streamtape.com" ||\
				printf "scraping streamtape.com\n"

			video_url=$(curl -s "$video_url" | sed -n -E '
				/^<script>document/{
				s/^[^"]*"([^"]*)" \+ '\''([^'\'']*).*/https:\1\2\&dl=1/p
				q
				}
			');;
	esac


	if [ $is_download -eq 0 ]; then
		# write anime and episode number
		sed -E "
			s/^${selection_id}\t[0-9]+/${selection_id}\t$episode/
		" "$logfile" > "${logfile}.new" && mv "${logfile}.new" "$logfile"

		$player_fn --http-header-fields="Referer: $embedded_video_url" "$video_url" >/dev/null 2>&1 && loop_choice
	else
		if [ $is_dmenu -eq 0 ]; then
			printf "Downloading episode $episode ...\n"
			printf "%s\n" "$video_url"
		else
			notify-send "Downloading $episode" &&\
				notify-send "$video_url"
		fi
		# add 0 padding to the episode name
		episode=$(printf "%03d" $episode)
		{
			curl -L -# -C - "$video_url" -G -e 'https://streamani.io/' \
				-o "${anime_id}-${episode}.mp4" "$video_url" >/dev/null 2>&1 &&
				if [ $is_dmenu -eq 0 ]; then
					printf "${c_green}Downloaded episode: %s${c_reset}\n" "$episode" ||\
					printf "${c_red}Download failed episode: %s${c_reset}\n" "$episode"
				else
					notify-send "Downloaded episode: $episode" ||\
						notify-send "Download failed episode: $episode"
				fi
		}
	fi
}

############
# Start Up #
############

# to clear the colors when exited using SIGINT
trap "printf '$c_reset'" INT HUP

dep_ch "$player_fn" "curl" "sed" "grep"

# option parsing
is_download=0
is_dmenu=0
scrape=query
while getopts 'hdHD' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
		H)
			scrape=history
			;;
		D)	
			has_dmenu
			is_dmenu=1
			;;
	esac
done
shift $((OPTIND - 1))

########
# main #
########

case $scrape in
	query)
		get_search_query "$*"
		search_results=$(search_anime "$query")
		[ -z "$search_results" ] && die "No search results found"
		anime_selection "$search_results"
		episode_selection
		;;
	history)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
esac


{ # checking input
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start

	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq $ep_choice_start $ep_choice_end)
	fi
}

# add anime to history file
grep -q -w "${selection_id}" "$logfile" ||
	printf "%s\t%d\n" "$selection_id" $episode >> "$logfile"

for ep in $episodes
do
	open_episode "$selection_id" "$ep"
done
episode=${ep_choice_end:-$ep_choice_start}
