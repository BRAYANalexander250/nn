#!/bin/sh

# ani-cli UI
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/pystardust/ani-cli

UI_VERSION="1.0.0"
UI_NAME="classic"


ui_version_text() {
	inf "UI theme: $UI_NAME"
	inf "UI Version: $UI_VERSION"
}

update_ui () {
	update="$(curl -s "https://raw.githubusercontent.com/pystardust/ani-cli/master/ui")" || die "Connection error"
	update="$(printf '%s\n' "$update" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		inf "UI is up to date :)"
	else
		if printf '%s\n' "$update" | patch "$0" - ; then
			inf "UI has been updated"
		else
			die "Can't update UI for some reason!"
		fi
	fi
}

retry () {
	err "$*"
	prompt
}

# display an error message to stderr (in red)
err () {
	printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
}

# display an informational message (first argument in green, second in magenta)
inf () {
	printf "\33[2K\r\033[1;35m%s \033[1;35m%s\033[0m\n" "$1" "$2"
}

progress() {
	printf "\33[2K\r\033[1;34m%s\033[0m" "$1"
}

debug () {
	printf "\n\033[1;32mReferrer :\033[0m %s\n\033[1;32mlinks >>\n\033[0m%s\n" "$1" "$2"
}

# prompts the user with message in $1-2 ($1 in blue, $2 in magenta) and saves the input to the variables in $REPLY and $REPLY2
prompt () {
	[ -n "$*" ] && printf "\33[2K\r\033[1;35m%s\n" "$*"
	printf "\033[1;35m> \033[0m"
	read -r REPLY REPLY2
}

selection_menu() {
	menu_line_parity=0
	while read -r option line; do
		if [ "$option" = "q" ]; then
			printf "\033[1;31m(\033[1;31m%s\033[1;31m) \033[1;31m%s\033[0m\n" "$option" "$line"
		else
			if [ "$menu_line_parity" -eq 0 ]; then
				printf "\033[1;33m(\033[1;33m%s\033[1;33m) \033[1;33m%s\033[0m\n" "$option" "$line"
				menu_line_parity=1
			else
				printf "\033[1;36m(\033[1;36m%s\033[1;36m) \033[1;36m%s\033[0m\n" "$option" "$line"
				menu_line_parity=0
			fi
		fi
	done <<-EOF
	$*
	EOF
	prompt
}
