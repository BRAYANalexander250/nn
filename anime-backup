#!/bin/sh

# dependencies: grep sed curl video_player
# video_player ( needs to be able to play urls )
player_fn="mpv"
home=${HOME}

prog="anime"
base_url=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://gogoanime.cm)

already_asked=0

episode_format="Episode-"
episode_file_extension=".mkv"

#######################
# Downloaded Episodes #
#######################

get_command() {
  rofi -e """<i><span color='grey'>Commands:</span></i>
<b><span color='blue'>n</span> <span color='grey'>=</span> <span color='red'>Next Episode</span>
<span color='blue'>p</span> <span color='grey'>=</span> <span color='red'>Previous Episode</span>
<span color='blue'>c</span> <span color='grey'>=</span> <span color='red'>Choose Episode</span>
<span color='blue'>r</span> <span color='grey'>=</span> <span color='red'>Repeat Current Episode</span>
<span color='blue'>d</span> <span color='grey'>=</span> <span color='red'>Choose Different Anime</span>
<span color='blue'>e</span> <span color='grey'>=</span> <span color='red'>Exit</span></b>""" -markup

  action=$(rofi -dmenu -scroll-method 1 -window-title "Command")

  case ${action} in
    "n")
      episode_number=$(echo ${episode} | tr ${episode_format} ' ' | tr ${episode_file_extension} ' ')
      episode_number=$(echo ${episode_number} | sed -e 's/^[[:space:]]*//')

      next_episode_number="$((episode_number + 1))"

      episode="${episode_format}${next_episode_number}.mkv"

      cd "${anime_folder}/${anime}/"
      mpv "${episode}"

      get_command ${episode} ${anime} ;;
    "p")
      episode_number=$(echo ${episode} | tr ${episode_format} ' ' | tr ${episode_file_extension} ' ')
      episode_number=$(echo ${episode_number} | sed -e 's/^[[:space:]]*//')

      next_episode_number="$((episode_number - 1))"

      episode="${episode_format}${next_episode_number}.mkv"

      cd "${anime_folder}/${anime}/"
      mpv "${episode}"

      get_command ${episode} ${anime} ;;
    "c")
      play_selection "${anime_folder}/${anime}" "same-anime" ;;
    "r")
      mpv ${1}

      get_command ${episode} ${anime} ;;
    "d")
      play_selection ${anime_folder} ;;
    "e")
      err "Exiting ..." && exit ;;
    *)
      err "Wrong Command ..." && get_command ${episode} ${anime} ;;
  esac
}

play_selection() {
  if [[ ${2} == 'same-anime' ]]; then
    cd ${1}

    episode=$(ls | tr '-' ' ' | tr '.mkv' ' ' | rofi -dmenu -scroll-method 1 -window-title 'Episode')

    episode=$(echo ${episode} | tr ' ' '-')
    episode="${episode}.mkv"
    mpv ${episode}

    get_command ${episode} ${anime}
    exit
  elif [[ -d ${1} ]]; then
    cd ${1}

    anime=$(ls | tr '-' ' ' | rofi -dmenu -scroll-method 1 -window-title 'Anime')
    anime=$(echo ${anime} | tr ' ' '-')
    cd ${anime}

    episode=$(ls | tr '-' ' ' | tr '.mkv' ' ' | rofi -dmenu -scroll-method 1 -window-title 'Episode')

    episode=$(echo ${episode} | tr ' ' '-')
    episode="${episode}.mkv"
    mpv ${episode}

    get_command ${episode} ${anime}
    exit
  else
    err "Folder ${anime_folder} doesn't exist!"
  fi
}

select_folder() {
  anime_folder=$(rofi -dmenu -scroll-method 1 -window-title "Enter path to your anime folder. (Default is ~/Anime/)")

  if [[ -z ${anime_folder} ]]; then
    anime_folder="${home}/Anime"
    play_selection ${anime_folder}
  else
    anime_folder="${HOME}/${anime_folder:2}/"
    play_selection ${anime_folder}
  fi
}

##################
# Main Functions #
##################

err() {
  rofi -e "<span color='red'><b>$1</b></span>" -markup
}

search_anime() {
	# get anime name along with its id
  search=$(echo "$1" | tr ' ' '-' )
  titlepattern='<a href="/category/'

  curl -s "$base_url//search.html" \
    -G \
    -d "keyword=$search" |
  sed -n -E '
    s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
    '
}

search_eps() {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "$base_url/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_embedded_video_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	# dub prefix takes the value "-dub" when dub is needed else is empty
	curl -s "$base_url/$anime_id${dub_prefix}-episode-$ep_no" |
	sed -n -E '
		/^[[:space:]]*<a href="#" rel="100"/{
		s/.*data-video="([^"]*)".*/https:\1/p
		q
		}'
}

get_links () {
	embedded_video_url=$(get_embedded_video_link "$anime_id" "$episode")
	episode_id=$(echo "$embedded_video_url" | grep -oE "id.+?&")
	video_url="https://gogoplay1.com/download?${episode_id}"
}

get_video_quality() {
	get_links
	video_quality=$(curl -s get_links "$video_url" | grep -oE "(http|https):\/\/.*com\/cdn.*expiry=[0-9]*"| sort -V | sed 's/amp;//')
	case $quality in
		best)
			play_link=$(echo "$video_quality" | sort -V | tail -n 1);;
		worst)
			play_link=$(echo "$video_quality" | sort -V | head -n 1);;
        	*)
  	             	play_link=$(echo "$video_quality" | grep -oE "(http|https):\/\/.*com\/cdn.*"${quality}".*expiry=[0-9]*")
                	if [ -z "$play_link" ]; then
                    echo "Current video quality is not available (defaulting to highest quality)"
                		quality=best
                		play_link=$(echo "$video_quality" | sort -V | tail -n 1)
                	fi
                	;;
	esac
}

dep_ch() {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
      err "Program \"$dep\" not found. Please install it."
		fi
	done
}

# get query
get_search_query() {
	if [ -z "$*" ]; then
    query=$(rofi -dmenu -scroll-method 1 -window-title "Search Anime")
	else
		query=$*
	fi
}

###################
# Anime selection #
###################

anime_count=""

anime_selection() {
	search_results=$*

	count=1
	while read anime_id; do
    anime_count+="""<b><span color='grey'>[</span><span color='blue'><i>${count}</i></span><span color='grey'>]</span><span color='grey'>:</span> <span color='red'><i>${anime_id}</i></span></b>
"""
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	# User input
  err "${anime_count}"
  choice=$(rofi -dmenu -scroll-method 1 -window-title "Enter Number")

	# Check if input is a number
  [ "$choice" -eq "$choice" ] 2>/dev/null || err "Input isn't a Number"

	# Select respective anime_id
	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

  [ -z "$selection_id" ] && err "Invalid Number"

  search_eps "${selection_id}"

	read last_ep_choice <<-EOF
	$(search_eps "$selection_id")
	EOF
}

################
# Ep selection #
################

episode_selection() {
  if [[ ${last_ep_choice} -ge 1 ]]; then
    if [[ ${is_download} -eq 1 ]]; then
      episode_to_download=$(rofi -dmenu -scroll-method 1 -window-title """Choose Episode [${first_ep_choice}-${last_ep_choice}])
start_number end_number
EX: 1 3""")
      first_ep_choice=$(echo ${episode_to_download} | cut -f1 -d' ')
      last_ep_choice=$(echo ${episode_to_download} | cut -f2 -d' ')
    else
      episode=$(rofi -dmenu -scroll-method 1 -window-title """Choose Episode [${first_ep_choice}-${last_ep_choice}]")
    fi
  else
    err "No Episodes Found"
  fi
}

check_input() {
  #[ "$first_ep_choice" -eq "$first_ep_number" ] 2>/dev/null || err "Invalid number"
	episodes=$last_ep_choice
	if [ -n "$last_ep_choice" ]; then
    #[ "$last_ep_choice" -eq "$last_ep_number" ] 2>/dev/null || err "Invalid number"
		# create list of episodes to download/watch
		episodes=$(seq $first_ep_choice $last_ep_choice)
	fi
}

open_selection() {
  if [[ ${is_download} -eq 1 ]]; then
    for ep in $episodes; do
      open_episode "$selection_id" "$ep"
    done
    episode=${last_ep_choice:-$first_ep_choice}
  fi
  open_episode "${selection_id}" "${episode}"
}


open_episode() {
	anime_id=$1
	episode=$2

  echo "Getting data for episode ${episode}"
	
	get_video_quality
	status_code=$(curl -s -I get_video_quality "$play_link" | head -n 1|cut -d ' ' -f2)

	if [ $is_download -eq 0 ]; then
		# write anime and episode number
		sed -E "
			s/^${selection_id}\t[0-9]+/${selection_id}\t$((episode+1))/
		" "$logfile" > "${logfile}.new" && mv "${logfile}.new" "$logfile"

		case $player_fn in
			"mpv")
				if echo "$status_code" | grep -vE "^2.*"; then
          err "Cannot reach servers!"
				else
					nohup $player_fn "$play_link" > /dev/null 2>&1
          echo "Video playing"
				fi;;
			"vlc")
				if echo "$status_code" | grep -vE "^2.*"; then	
          err "Cannot reach servers!"
				else
					nohup $player_fn "$play_link" > /dev/null 2>&1
          echo "Video playing"
				fi;;
		esac
	else
    if [[ ${already_asked} -eq 0 ]]; then
      anime_folder=$(rofi -dmenu -window-title "Enter location for your main anime folder (Default is ~/Anime/)")

      if [[ -z ${anime_folder} ]]; then
        anime_folder="${home}/Anime"
      else
        anime_folder="${HOME}/${anime_folder:2}/"
      fi

      if [[ ! -d ${anime_folder} ]]; then
        confirmation=$(echo -e "Yes\nNo" | rofi -dmenu -window-title """${anime_folder} doesn't exist
Do you want me to create it""")
        
        case ${confirmation} in
          "Yes")
            mkdir -p ${anime_folder}
            ;;
          "No")
            exit
            ;;
        esac
      fi

      anime_name=$(rofi -dmenu -window-title """Enter name of the folder you want to save the videos
EX: Attack-on-Titan
Default is ${selection_id}""")

      if [[ -z ${anime_name} ]]; then
        anime_name=${selection_id}
      fi

      if [[ ! -d "${anime_folder}/${anime_name}" ]]; then
        confirmation=$(echo -e "Yes\nNo" | rofi -dmenu -window-title """${anime_folder}/${anime_name} doesn't exist
Do you want me to create it""")
        
        case ${confirmation} in
          "Yes")
            mkdir -p "${anime_folder}/${anime_name}"
            ;;
          "No")
            exit
            ;;
        esac
      fi

      cd "${anime_folder}/${anime_name}"

      already_asked=1
    fi

		echo "Downloading episode $episode ..."
		echo "$video_url"
		# add 0 padding to the episode name
		episode=$(echo ${episode})
		{
			ffmpeg -i "$play_link" -c copy "${anime_id}-${episode}.mkv" >/dev/null 2>&1 &&
        rofi -e "<span color='green'>Downloaded episode</span>: <b><span color='blue'>${episode}</span></b>" -markup ||
      err "Failed to download ${episode}, please retry or check your internet connection."
		}
	fi
}

############
# Start Up #
############

# option parsing
is_download=0
half_ep=0
quality=best
scrape=query
navigation_type=0
first_ep_choice="1"

dep_ch "$player_fn" "curl" "sed" "grep" "rofi"
shift $((OPTIND - 1))

########
# Main #
########

commands_to_choose_from() {
  echo -e "Search Through Folder (~/Anime)\nSearch for an Anime\nDownload" | rofi -dmenu -scroll-method 1 -window-title "What to Do"
}

output=$(commands_to_choose_from)

if [[ ${output} == 'Search Through Folder (~/Anime)' ]]; then
  select_folder
elif [[ ${output} == 'Download' ]]; then
  is_download=1
  get_search_query "$*"
  search_results=$(search_anime ${query})
  [ -z "$search_results" ] && err "No search results found"
  anime_selection "$search_results"
  episode_selection
elif [[ ${output} == 'Search for an Anime' ]]; then
  get_search_query "$*"
  search_results=$(search_anime ${query})
  [ -z "$search_results" ] && err "No search results found"
  anime_selection "$search_results"
  episode_selection
fi

check_input
open_selection

while :; do
  if [[ ${is_download} -eq 0 ]]; then
    rofi -e """<i><span color='grey'>Commands:</span></i>
<b><span color='blue'>n</span> <span color='grey'>=</span> <span color='red'>Next Episode</span>
<span color='blue'>p</span> <span color='grey'>=</span> <span color='red'>Previous Episode</span>
<span color='blue'>r</span> <span color='grey'>=</span> <span color='red'>Repeat Current Episode</span>
<span color='blue'>s</span> <span color='grey'>=</span> <span color='red'>Choose Different Anime</span>
<span color='blue'>e</span> <span color='grey'>=</span> <span color='red'>Exit</span></b>""" -markup

    action=$(rofi -dmenu -scroll-method 1 -window-title "Command")

    case ${action} in
      "n")
        episode=$((episode + 1)) ;;
      "p")
        episode=$((episode - 1)) ;;
      "r")
        episode=$((episode)) ;;
      "d")
        episode=$(rofi -dmenu -scroll-method 1 -window-title "Choose Episode [${first_ep_choice}-${last_ep_choice}])" ;;
      "e")
        err "Exiting ..." && exit ;;
      *)
        err "Wrong Command ..." && exit ;;
    esac

    open_episode "$selection_id" "$episode"
  else
    exit
  fi
done

